@implements IDisposable
@if (allState.ShowCity)
{
    <div class="continer mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Countries</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked"><i class="bi bi-plus-circle-dotted"></i>Add City</button>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow:hidden; overflow-y:scroll">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Country</th>
                                        <th scope="col">City</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Cities is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in Cities)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Country!.Name</td>
                                                <td>@item.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="()=>EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="()=>DeleteClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4"><div class="alert alert-info text-center">No City added yet!</div></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


<style>
    #cursorStyle {
        cursor: pointer;
    }
</style>

<CityDialog @ref="cityDialog"
            HandleSaveOperationEvent="HandleSaveOperationEvent"
            City="City"
            Countries="Countries"/>

@code {
    public string Title { get; set; } = "Add";
    CityDialog? cityDialog;
    City City = new();
    public List<City> Cities { get; set; } = new();
    public List<Country> Countries { get; set; } = new();


    protected async override Task OnInitializedAsync()
    {
        await GetCities();
        await GetCountries();
        allState.Action += StateHasChanged;
    }

    private async Task GetCities()
    {
        Cities = await cityService.GetAll(Constants.CityBaseUrl);
    }

    private async Task GetCountries()
    {
        Countries = await countryService.GetAll(Constants.CountryBaseUrl);
    }

    void AddButtonClicked()
    {
        cityDialog?.ChangeTitle("Add");
        City = new();
        OpenDialog();
    }

    void OpenDialog()
    {
        cityDialog?.OpenDialog();
    }

    private async Task HandleSaveOperationEvent(City city)
    {
        bool successCheck = false;
        if (city.Id > 0)
        {
            var result = await cityService.Update(city, Constants.CityBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await cityService.Insert(city, Constants.CityBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            City = new();
            await GetCities();
            cityDialog?.ChangeTitle("Add");
        }
    }

    private void EditClicked(City item)
    {
        cityDialog?.ChangeTitle("Update");
        City = item;
        OpenDialog();
    }

    private async Task DeleteClicked(City item)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete{item.Name}?", "Confirm Delete");
        if (!confirm) return;

        var respnse = await branchService.DeleteById(item.Id, Constants.CityBaseUrl);
        var result = await DisplayMessage(respnse.Flag, respnse.Message);
        if(result) await GetCities();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }

}
